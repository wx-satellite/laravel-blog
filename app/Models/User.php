<?php

namespace App\Models;

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];


    public function statuses()
    {
        return $this->hasMany(Status::class);
    }

    public function feeds()
    {
        return $this->statuses()->orderBy("created_at", "desc");
    }

    public function headImage($size = 100)
    {
        $hash = md5(strtolower($this->attributes["email"]));
        return "http://www.gravatar.com/avatar/$hash?s=$size";
    }

    // 模型事件注册
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        // 模型事件批量操作时可能有坑：https://learnku.com/laravel/t/4067/eloquent-model-update-cannot-trigger-event
        static::creating(function ($user) {
            $user->activation_token = Str::random(10);
        });
    }

    // 发送邮件
    public function sendEmailConfirmationTo($user)
    {
        $view = "emails.confirm";
        $data = compact("user");
        $to = $user->email;
        $name = "三斤和他的猫";
        $subject = "测试邮件";
        Mail::send($view, $data, function ($message) use ($to, $name, $subject) {
            $message->to($to)->subject($subject);
        });
    }

    // 获取粉丝
    public function followers()
    {
        // 多对多关系是需要一张中间表的，第一个参数为需要合并的模型，第二个参数是中间表的名称，第三个参数是当前模型的外键名，第四个参数是合并模型的外键名
        return $this->belongsToMany(User::class, "followers", "user_id", "follower_id");
    }

    // 获取关注者
    public function followings()
    {
        return $this->belongsToMany(User::class, "followers", "follower_id", "user_id");
    }

    /****** 多对多关联的一系列操作  ******/
    /**
     *  attach,sync都是往中间表中增加一条记录，前者接收一个数组（不会去重），后者接收两个参数一个是数组（会去重）一个是布尔值，
     * 布尔值：true表示移除不包含在数组中的记录，false不移除
     *  detach 往中间表中删除一条记录
     */

    // 关注别人
    public function follow($uids)
    {
        if (!is_array($uids)) {
            $uids = compact("uids");
        }
        $this->followings()->sync($uids,false);
    }

    // 取关
    public function unfollow($uids) {
        if(!is_array($uids)) {
            $uids = compact("uids");
        }
        $this->followings()->detach($uids);
    }

    // 是否关注了某人
    public function isFollowing($user_id) {
        // $this->followings 其实是一个collection集合类型
        return $this->followings->contains($user_id);
    }
}
